import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.util.HashMap;
import java.util.Map;

public class battleManager {

    public static void main(String[] args) throws IOException {
        BufferedReader reader = new BufferedReader(new InputStreamReader(System.in));

        Map<String, Integer> energyByUsername = new HashMap<>();
        Map<String, Integer> healthByUsername = new HashMap<>();

        String line;

        while (!"Results".equals(line = reader.readLine())) {
            String[] tokens = line.split(":");

            switch (tokens[0]) {
                case "Add":
                    if (!energyByUsername.containsKey(tokens[1])) {
                        healthByUsername.put(tokens[1], Integer.parseInt(tokens[2]));
                        energyByUsername.put(tokens[1], Integer.parseInt(tokens[3]));
                    } else {
                        healthByUsername.put(tokens[1], healthByUsername.get(tokens[1]) + Integer.parseInt(tokens[2]));
                    }
                    break;
                case "Attack":
                    String attackersName = tokens[1];
                    String defendersName = tokens[2];
                    if (energyByUsername.containsKey(attackersName) && energyByUsername.containsKey(defendersName)) {
                        int defendersHealth = healthByUsername.get(defendersName) - Integer.parseInt(tokens[3]);
                        int attackersEnergy = energyByUsername.get(attackersName) - 1;

                        if (defendersHealth <= 0) {
                            System.out.println(defendersName + " was disqualified!");
                            healthByUsername.remove(defendersName);
                            energyByUsername.remove(defendersName);
                        } else {
                            healthByUsername.put(defendersName, defendersHealth);
                        }

                        if (attackersEnergy <= 0) {
                            System.out.println(attackersName + " was disqualified!");
                            healthByUsername.remove(attackersName);
                            energyByUsername.remove(attackersName);
                        } else {
                            energyByUsername.put(attackersName, attackersEnergy);
                        }

                    }
                    break;
                case "Delete":
                    if (tokens[1].equals("All")) {
                        healthByUsername.clear();
                        energyByUsername.clear();
                    } else {
                        if (energyByUsername.containsKey(tokens[1])) {
                            energyByUsername.remove(tokens[1]);
                            healthByUsername.remove(tokens[1]);
                        }
                    }
                    break;
            }
        }

        System.out.println("People count: " + healthByUsername.size());
        healthByUsername.entrySet().stream()
                .sorted(Map.Entry.<String, Integer>comparingByValue().reversed()
                        .thenComparing(Map.Entry.comparingByKey()))
                .forEach(entry -> System.out.println(String.format("%s - %d - %d", entry.getKey(), entry.getValue(), energyByUsername.get(entry.getKey()))));
    }
}


